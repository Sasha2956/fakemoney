generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Colors {
  RED
  BLUE
  GREEN
  PINK
  PURPLE
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String?   @unique
  emailVerified         DateTime?
  image                 String?
  accounts              Account[]
  cards                 Card[]
  stores                Store[]
  isOnboardingCompolete Boolean   @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Card {
  id String @id @default(cuid())

  user                User          @relation(references: [id], fields: [userId])
  userId              String
  color               Colors
  number              Int
  cvc                 Int
  amount              Int           @default(2500)
  sentTransactions    Transaction[] @relation("FromCard")
  receiveTransactions Transaction[] @relation("ToCard")
  stores              Store[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Store {
  id String @id @default(cuid())

  user         User          @relation(references: [id], fields: [userId])
  userId       String
  card         Card          @relation(references: [id], fields: [cardId])
  cardId       String
  name         String
  transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id String @id @default(cuid())

  from   Card   @relation("FromCard", fields: [fromId], references: [id])
  fromId String

  to   Card   @relation("ToCard", fields: [toId], references: [id])
  toId String

  store   Store?  @relation(fields: [storeId], references: [id])
  storeId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
